{"version":3,"file":"static/js/610.a5608f85.chunk.js","mappings":"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","sources":["lib/smart-filter.ts"],"sourcesContent":["/**\n * Filtrado Inteligente de Papers\n * Reduce 600+ papers a los 10-15 m√°s relevantes ANTES de enviar a Gemini\n */\n\nexport interface FilteredPaper {\n  paper: any;\n  relevanceScore: number;\n  matchedKeywords: string[];\n  titleMatch: boolean;\n  abstractMatch: boolean;\n}\n\nexport class SmartPaperFilter {\n  /**\n   * Filtrado inteligente por m√∫ltiples criterios\n   */\n  static filterRelevantPapers(\n    papers: any[],\n    userQuery: string,\n    maxResults: number = 5 // AJUSTADO: Gemini Free Tier l√≠mite conservador\n  ): FilteredPaper[] {\n    console.log(`üîç Filtrando ${papers.length} papers para: \"${userQuery}\"`);\n\n    const queryWords = this.extractKeywords(userQuery);\n    const scoredPapers: FilteredPaper[] = [];\n\n    papers.forEach((paper) => {\n      const score = this.calculateRelevanceScore(paper, queryWords, userQuery);\n\n      if (score.relevanceScore > 0.1) {\n        // Umbral m√≠nimo REDUCIDO para debug\n        scoredPapers.push(score);\n      }\n\n      // DEBUG: Log papers cardiovasculares espec√≠ficos\n      if (\n        paper.title.toLowerCase().includes(\"cardiovascular\") ||\n        paper.title.toLowerCase().includes(\"cardiac\") ||\n        paper.title.toLowerCase().includes(\"heart\")\n      ) {\n        console.log(\n          `ü©∫ CARDIOVASCULAR PAPER: \"${\n            paper.title\n          }\" - Score: ${score.relevanceScore.toFixed(2)}`\n        );\n      }\n    });\n\n    // Ordenar por relevancia y tomar los mejores\n    const filtered = scoredPapers\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\n      .slice(0, maxResults);\n\n    console.log(`‚úÖ Filtrados: ${filtered.length} papers m√°s relevantes`);\n    console.log(\n      `üìä Scores: ${filtered\n        .map((p) => p.relevanceScore.toFixed(2))\n        .join(\", \")}`\n    );\n\n    // DEBUG: Mostrar t√≠tulos de papers seleccionados\n    console.log(`üìã Papers seleccionados:`);\n    filtered.forEach((paper, i) => {\n      console.log(\n        `   ${i + 1}. \"${paper.paper.title}\" (${paper.relevanceScore.toFixed(\n          2\n        )})`\n      );\n    });\n\n    return filtered;\n  }\n\n  /**\n   * Calcula score de relevancia usando m√∫ltiples criterios\n   */\n  private static calculateRelevanceScore(\n    paper: any,\n    queryWords: string[],\n    userQuery: string\n  ): FilteredPaper {\n    let score = 0;\n    const matchedKeywords: string[] = [];\n    let titleMatch = false;\n    let abstractMatch = false;\n\n    // 1. Matching en t√≠tulo (peso alto)\n    const titleScore = this.calculateTextMatch(paper.title, queryWords);\n    if (titleScore > 0) {\n      score += titleScore * 3; // Triple peso para t√≠tulo\n      titleMatch = true;\n    }\n\n    // 2. Matching en keywords (peso muy alto)\n    const keywordScore = this.calculateKeywordMatch(paper.keywords, queryWords);\n    if (keywordScore.score > 0) {\n      score += keywordScore.score * 4; // Cu√°druple peso para keywords\n      matchedKeywords.push(...keywordScore.matches);\n    }\n\n    // 3. Matching en abstract (peso medio)\n    const abstractScore = this.calculateTextMatch(paper.abstract, queryWords);\n    if (abstractScore > 0) {\n      score += abstractScore * 1.5;\n      abstractMatch = true;\n    }\n\n    // 4. Bonus por a√±o reciente\n    const currentYear = new Date().getFullYear();\n    const yearDiff = currentYear - paper.year;\n    if (yearDiff < 5) score += 0.2; // Bonus por papers recientes\n\n    // 5. Bonus por similitud sem√°ntica (sin ML, usando heur√≠sticas)\n    const semanticScore = this.calculateSemanticSimilarity(paper, userQuery);\n    score += semanticScore;\n\n    // 6. NUEVO: Boost cardiovascular espec√≠fico\n    let cardiovascularBoost = 0;\n    if (\n      userQuery.toLowerCase().includes(\"cardiovascular\") ||\n      userQuery.toLowerCase().includes(\"cardiac\") ||\n      userQuery.toLowerCase().includes(\"heart\")\n    ) {\n      const paperText = `${paper.title} ${paper.abstract} ${paper.keywords.join(\n        \" \"\n      )}`.toLowerCase();\n      if (\n        paperText.includes(\"cardiovascular\") ||\n        paperText.includes(\"cardiac\") ||\n        paperText.includes(\"heart\") ||\n        paperText.includes(\"cardiomyocyte\")\n      ) {\n        cardiovascularBoost = 3.0; // BOOST SIGNIFICATIVO\n        console.log(`üíó CARDIOVASCULAR BOOST: \"${paper.title}\"`);\n      }\n    }\n\n    const finalScore = score + cardiovascularBoost;\n\n    return {\n      paper,\n      relevanceScore: Math.min(finalScore, 10), // Cap a 10\n      matchedKeywords,\n      titleMatch,\n      abstractMatch,\n    };\n  }\n\n  /**\n   * Extrae keywords relevantes de la consulta del usuario\n   */\n  private static extractKeywords(query: string): string[] {\n    // Palabras comunes a filtrar\n    const stopWords = new Set([\n      \"el\",\n      \"la\",\n      \"de\",\n      \"que\",\n      \"y\",\n      \"a\",\n      \"en\",\n      \"un\",\n      \"es\",\n      \"se\",\n      \"no\",\n      \"te\",\n      \"lo\",\n      \"le\",\n      \"da\",\n      \"su\",\n      \"por\",\n      \"son\",\n      \"con\",\n      \"para\",\n      \"al\",\n      \"del\",\n      \"los\",\n      \"las\",\n      \"una\",\n      \"como\",\n      \"the\",\n      \"and\",\n      \"or\",\n      \"but\",\n      \"in\",\n      \"on\",\n      \"at\",\n      \"to\",\n      \"for\",\n      \"of\",\n      \"with\",\n      \"by\",\n      \"¬ø\",\n      \"?\",\n      \"¬øc√≥mo\",\n      \"c√≥mo\",\n      \"qu√©\",\n      \"cu√°les\",\n      \"cu√°l\",\n      \"d√≥nde\",\n      \"cu√°ndo\",\n    ]);\n\n    return query\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, \" \")\n      .split(/\\s+/)\n      .filter((word) => word.length > 2 && !stopWords.has(word))\n      .map((word) => word.trim());\n  }\n\n  /**\n   * Calcula match en texto usando keywords\n   */\n  private static calculateTextMatch(\n    text: string,\n    queryWords: string[]\n  ): number {\n    if (!text) return 0;\n\n    const lowerText = text.toLowerCase();\n    let matches = 0;\n\n    queryWords.forEach((word) => {\n      if (lowerText.includes(word.toLowerCase())) {\n        matches += 1;\n      }\n    });\n\n    return matches / queryWords.length; // Proporci√≥n de matches\n  }\n\n  /**\n   * Calcula match espec√≠fico en keywords del paper\n   */\n  private static calculateKeywordMatch(\n    paperKeywords: string[],\n    queryWords: string[]\n  ): { score: number; matches: string[] } {\n    if (!paperKeywords) return { score: 0, matches: [] };\n\n    const matches: string[] = [];\n    let score = 0;\n\n    paperKeywords.forEach((keyword) => {\n      const keywordLower = keyword.toLowerCase();\n      queryWords.forEach((queryWord) => {\n        if (\n          keywordLower.includes(queryWord.toLowerCase()) ||\n          queryWord.toLowerCase().includes(keywordLower)\n        ) {\n          matches.push(keyword);\n          score += 1;\n        }\n      });\n    });\n\n    return {\n      score: score / Math.max(queryWords.length, 1),\n      matches: [...new Set(matches)], // Remove duplicates\n    };\n  }\n\n  /**\n   * Similitud sem√°ntica b√°sica sin ML (usando heur√≠sticas)\n   */\n  private static calculateSemanticSimilarity(\n    paper: any,\n    userQuery: string\n  ): number {\n    const medicalTerms = {\n      bone: [\n        \"hueso\",\n        \"√≥seo\",\n        \"osteoblast\",\n        \"osteoclast\",\n        \"calcium\",\n        \"skeletal\",\n      ],\n      muscle: [\"m√∫sculo\", \"muscular\", \"myosin\", \"actin\", \"fiber\", \"strength\"],\n      heart: [\n        \"coraz√≥n\",\n        \"cardio\",\n        \"cardiac\",\n        \"cardiovascular\",\n        \"blood\",\n        \"pressure\",\n      ],\n      brain: [\"cerebro\", \"neural\", \"neuron\", \"cognitive\", \"memory\", \"behavior\"],\n      microgravity: [\"weightless\", \"zero-g\", \"spaceflight\", \"orbital\", \"space\"],\n      radiation: [\"cosmic\", \"particle\", \"dose\", \"exposure\", \"shielding\"],\n      experiment: [\"study\", \"research\", \"analysis\", \"investigation\", \"test\"],\n    };\n\n    const queryLower = userQuery.toLowerCase();\n    const paperText = `${paper.title} ${paper.abstract} ${paper.keywords.join(\n      \" \"\n    )}`.toLowerCase();\n\n    let semanticScore = 0;\n\n    Object.entries(medicalTerms).forEach(([concept, synonyms]) => {\n      if (queryLower.includes(concept)) {\n        synonyms.forEach((synonym) => {\n          if (paperText.includes(synonym.toLowerCase())) {\n            semanticScore += 0.1;\n          }\n        });\n      }\n    });\n\n    return Math.min(semanticScore, 0.5); // Cap a 0.5\n  }\n\n  /**\n   * Distribuci√≥n inteligente para manejo de l√≠mites de API\n   */\n  static distributeForAPI(\n    filteredPapers: FilteredPaper[],\n    maxUrlsPerRequest: number = 5 // AJUSTADO: Gemini Free Tier l√≠mite\n  ): FilteredPaper[][] {\n    const batches: FilteredPaper[][] = [];\n\n    for (let i = 0; i < filteredPapers.length; i += maxUrlsPerRequest) {\n      batches.push(filteredPapers.slice(i, i + maxUrlsPerRequest));\n    }\n\n    return batches;\n  }\n}\n"],"names":["SmartPaperFilter","filterRelevantPapers","papers","userQuery","maxResults","arguments","length","undefined","console","log","queryWords","this","extractKeywords","scoredPapers","forEach","paper","score","calculateRelevanceScore","relevanceScore","push","title","toLowerCase","includes","toFixed","filtered","sort","a","b","slice","map","p","join","i","matchedKeywords","titleMatch","abstractMatch","titleScore","calculateTextMatch","keywordScore","calculateKeywordMatch","keywords","matches","abstractScore","abstract","Date","getFullYear","year","calculateSemanticSimilarity","cardiovascularBoost","paperText","finalScore","Math","min","query","stopWords","Set","replace","split","filter","word","has","trim","text","lowerText","paperKeywords","keyword","keywordLower","queryWord","max","queryLower","semanticScore","Object","entries","bone","muscle","heart","brain","microgravity","radiation","experiment","_ref","concept","synonyms","synonym","distributeForAPI","filteredPapers","maxUrlsPerRequest","batches"],"sourceRoot":""}